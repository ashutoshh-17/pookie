clc; clear all; close all;

k = input('Enter the number of bits per symbol (e.g., 1 for BPSK, 2 for QPSK, etc.): ');
M = 2^k;
N = k * 1000;
SNRdB = 0:2:20;
sdB = SNRdB + 10*log10(k);

b = 0:M-1;
map = bitxor(b, floor(b/2));
[~, ttind] = sort(map);

Err = zeros(1, length(SNRdB));

for i = 1:length(SNRdB)
    bits = rand(1, N * k) > 0.5;

    bitsMatrix = reshape(bits, k, N)';
    bin2DecMatrix = 2.^((k-1):-1:0);
    symbolDec = sum(bitsMatrix .* bin2DecMatrix, 2)';

    graySymbol = ttind(symbolDec + 1) - 1;
    symbolPhase = graySymbol * (2 * pi / M);

    s = exp(1i * symbolPhase);

    noise = (1/sqrt(2)) * (randn(1, N) + 1i * randn(1, N));
    r = s + 10^(-sdB(i)/20) * noise;

    receivedPhase = angle(r);
    receivedPhase(receivedPhase < 0) = receivedPhase(receivedPhase < 0) + 2 * pi;
    quantizedPhase = 2 * pi / M * round(receivedPhase / (2 * pi / M));
    quantizedPhase(quantizedPhase == 2 * pi) = 0;

    receivedSymbolDec = round(quantizedPhase * M / (2 * pi));
    receivedGraySymbol = map(receivedSymbolDec + 1);

    receivedBits = dec2bin(receivedGraySymbol, k) - '0';
    receivedBits = receivedBits';
    receivedBits = receivedBits(:)';

    Err(i) = sum(bits ~= receivedBits);
end

sBer = Err / (N * k);
tBer = (1/k) * erfc(sqrt(k * 10.^(SNRdB/10)) * sin(pi / M));

figure;
semilogy(SNRdB, tBer, 'rs-', 'LineWidth', 2);
hold on;
semilogy(SNRdB, sBer, 'kx-', 'LineWidth', 2);
grid on;
legend('Theory', 'Simulation');
xlabel('SNR (dB)');
ylabel('Bit Error Rate (BER)');
title(['BER vs SNR for M-PSK with M = ' num2str(M)]);
